# defmodule Dynamic.Repo.Migrations.CreateWorkflows do
#   use Ecto.Migration
#   alias Dynamic.Utils
#   @system_id Ecto.UUID.dump!("00000000-0000-0000-0000-000000000000") |> Ecto.UUID.cast!()

#   def change do
#     create table(:workflows, primary_key: false, options: "INHERITS (base)") do
#       add :id, :uuid, null: false, autogenerate: true
#       add :name, :string
#       add :description, :string

#       timestamps([type: :timestamptz, extended: true, abbrev: true])
#     end
#     create unique_index(:workflows, [:id])

#     permissions = %{ workflows: [:create, :read, :update, :delete] }

#     execute("""
#     INSERT INTO tables (id, inserted_at, updated_at, name, parent, schema, created_by, updated_by, relations, permissions)
#       VALUES (gen_random_uuid()::uuid, timezone('utc', now()), timezone('utc', now()), 'workflows', 'base', (SELECT json_agg(json_build_object('name', t.column_name, 'type', t.udt_name)) FROM information_schema.columns AS t WHERE table_name = 'workflows' AND t.table_schema = 'public'), '#{@system_id}', '#{@system_id}', NULL, NULL);
#     """)

#     # Update the permissions for the workflows table

#     execute("""
#     UPDATE tables
#       SET permissions = '#{Jason.encode!(permissions)}'
#       WHERE name = 'workflows';
#     """)


#   end

#   def down do
#     drop table(:workflows)
#   end
# end
